
# bindview.js

Könnyű és rugalmas DOM templating és data binding library.

IE8+ kompatibilis.


## Áttekintés

Segítségével HTML-be ágyazva, deklaratívan, egy bővített HTML szintaxissal definálhatunk
interaktív javascripptel megtámogatott komponenseket, widgeteket stb.


### Gyors példa a használatra


Először megadjuk a markupot, és megjelöljük benne a megfelelő helyeket
ahová adatokat akarunk kapcsolni

```
#!html
<div id="bindto">

    Name: <input type="text" bind-value="name" />

    <h2>Hello {{ name }}!</h2>

</div>
```

Majd inicializájuk a bindinget, és opcionálisan átadunk neki egy scope objektumot.

```
#!js
$('bindto').bindview({ name: 'John Foobar' });
```

Abban az esetben, ha nem adunk át scopeot, a "name" paraméter alapesetben üres lesz.


### A "scope"

Az ún. _scope_  a `bindview()`-nek átadott objektum, az ebben található propertyk és metódusok elérhetőek
lesznek az expressiönökben.


### A "view"

A 'view' az elem amelyre rábindeltük a scopeunkat,és amelynek tartalma DOM templateként funkcionál.


## Expressionök

A scope objektum bindelése a DOM objektumokra egy rugalmas, egyszerűbb kifejezéseket támogató
"nyelven" lehetséges.

A kifejezések a háttérben dinamikusan értékelődnek ki újra ha egy bindelt érték változik, és
frissítik, valamint lehetőséget adnak arra hogy egy érték ne csak scope->DOM  irányba, hanem
visszafele is utazhasson (ld: _bind-value_)

### az expressiönökben használható operátorok (a kiértékelés sorrendjébenben),és egyéb elemek

(az operátorok működése ált megegyezik a js-beli megfeleőikkel)

| operátor | példa         | magyarázat  |
|----------|---------------|-------------|
| `(` `)`  | `a * (b + c)` | zárójelezés |

.

| operátor | példa    | magyarázat |
|----------|----------|------------|
| `=`      | `a = 17` | értékadás  |

.

| operátor | példa                 | magyarázat                   |
|----------|-----------------------|------------------------------|
| `||`     | `value || 'no value'` | logikai vagy / default guard |

.

| operátor | példa                 | magyarázat         |
|----------|-----------------------|--------------------|
| `&&`     | `value && value.prop` | logikai és / guard |

.

| operátor | példa    | magyarázat     |
|----------|----------|----------------|
| `==`     | `a == b` | egyenlőség     |
| `!=`     | `a != b` | nem-egyenlőség |

.

| operátor | példa    | magyarázat         |
|----------|----------|--------------------|
| `<`      | `a < b`  | kisebb             |
| `<=`     | `a <= b` | kisebb v. egyenlő  |
| `>`      | `a > b`  | nagyobb            |
| `>=`     | `a >= b` | nagyobb v. egyenlő |

.

| operátor | példa   | magyarázat                  |
|----------|---------|-----------------------------|
| `+`      | `3 + 2` | összeadás, stringösszefűzés |
| `-`      | `7 - 5` | kivonás                     |

.

| operátor | példa    | magyarázat      |
|----------|----------|-----------------|
| `*`      | `6 * 7`  | szorzás         |
| `/`      | `15 / 3` | kivonás         |
| `%`      | `11 % 7` | osztás maradéka |

.

| operátor | példa  | magyarázat |
|----------|--------|------------|
| `-`      | `-a`   | negálás    |
| `!`      | `!a`   | tagadás    |
| `++`     | `++a`  | pre-inc    |
| `--`     | `--b`  | pre-dec    |

.

| operátor | példa                       | magyarázat        |
|----------|-----------------------------|-------------------|
| `++`     | `a++`                       | post-inc          |
| `--`     | `b--`                       | post-dec          |
| `.`      | `name.prop`                 | property elérése  |
| `[` `]`  | `array[i + 17]`             | tömbindex elérése |
| `(` `)`  | `method(17, true, 'hello')` | fv hívás          |

.

| literálok                 |                             |
|---------------------------|-----------------------------|
| `'string'`                |  szöveges literál           |
| `18.1e17`                 | szám                        |
| `true` `false`            | boolean                     |
| `null`                    | NULL                        |
| `[1,2,3]`                 | tömb literál                |
| `{number: 1, bln: true }` | objektum literál            |
| `propname`                | property elérése a scopeban |


## Binderek

a binderek segítségével megadhatjuk hogy melyik DOM elem mely tulajdonságához kapcsoljuk a scope
 propertyket, valamint egyszerűbb logikákat is használhatunk.


### bind-value="<expr>"

Kétirányú bindinget valósít meg egy _input_ elem **value**ja és a megadott expressiön közt.
(azaz ha az expressiön egy scope objektum propertyjára mutat, az input elem "visszaírja" oda az értéket)

```
#!html
<input type="text" bind-value="name" />
```

### {{ <expr> }}
### bind-text="<expr>"

Az <expr> értékét a DOM node **textContent**-jéhez bindeli.
(azaz az érték escapelődve íródik ki)

A `{{ }}` forma létrehoz a DOM-ban egy textNode-ot, egyébként pedig a megjelölt node tartalmát frissíti az expressiön.

```
#!html
Hello {{ name }}!
```

```
#!html
<span bind-text="name.toLowercase()"></span>
```

### bind-html="<expr>"

Az <expr> értékét a DOM node **innerHTML**-jéhez bindeli.
(azaz az értél egy-az egyben beíródik html-be, a stringben lévő nodeok kirenderelődnek)

```
#!html
<div bind-html="article"></div>
```

### bind-data-<name>="<expr>"

Az <expr> értékét a DOM node-ra bindeli egy jQuery.data ('<name>') hívás segítségével.

```
#!html
<div bind-data-myid="article.id"></div>
```

### bind-on-<eventname>="<expr>"

Adott event esetén meghívja az <expr> értékét mint handler fv-t.

Kombinálható egy data-on-<eventname> binderrel is, az ottani <expr> aktuális értéke átadódik majd a handler fv-nek.

```
#!html
<button bind-on-click="btnClick">click me!</button>
<!-- paraméterrel -->
<button bind-on-click="btn2Click" bind-data-on-click="['hello', name]">hello</button>
```

**figyelem**: ne fv hívást bindeljünk (`on-click="fn()"`), hanem csak az fv nevét (`on-click="fn"`)!

### repeat-<varname>="<expr>"

Az <expr>-ből kiértékelt tömb elemein iterál végig, a DOM elem tartalmát megismételve minden
egyes tömbelemre.

Az ismétlődések saját al-scope ot kapnak, melyekben elérhetőek a következő property-k

- _`<varname>`_: az aktuális elem
- `$index`: az aktuális elem sorszáma (0-tól)
- `$parent`: a szülő scope

példa html:
```
#!html
<ul bind-repeat-name="sons">
    <li>{{ name }} son of {{ $parent.name }}</li>
</ul>
```

és a hozzá való scope:
```
#!js
$('bindto').bindview
({
    name: 'Donald',
    sons:
    [
        'Hewey', 'Dewey', 'Louie'
    ]
});
```

### bind-<attribute>="<expr>"

Az alapértelmezett (fallback) binder az <expr> értékét egy DOM attribútumba bindeli, amely bármi lehet (aminek a neve nem ütközik az előző binderekkel).

```
#!html
<div bind-class="myclass.name"></div>
```
